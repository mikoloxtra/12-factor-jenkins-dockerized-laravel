pipeline {
    agent any
    
    environment {
        AWS_ACCESS_KEY_ID = credentials("aws-access-key-id")
        AWS_SECRET_ACCESS_KEY = credentials("aws-secret-access-key")
        AWS_SESSION_TOKEN = credentials("aws-session-token")
        DB_HOST = credentials("laravel-host")
        DB_DATABASE = credentials("laravel-database")
        DB_USERNAME = credentials("laravel-user")
        DB_PASSWORD = credentials("laravel-password")
        DOCKER_USERNAME = credentials("docker-user")
        DOCKER_PASSWORD = credentials("docker-password")
    }
    
    stages {
        stage("Build") {
            steps {
                sh 'php --version'
                sh 'composer install'
                sh 'composer --version'
                sh 'cp .env.example .env'
                sh 'echo DB_HOST=${DB_HOST} >> .env'
                sh 'echo DB_USERNAME=${DB_USERNAME} >> .env'
                sh 'echo DB_DATABASE=${DB_DATABASE} >> .env'
                sh 'echo DB_PASSWORD=${DB_PASSWORD} >> .env'
                sh 'php artisan key:generate'
                sh 'cp .env .env.testing'
                sh 'php artisan migrate'
            }
        }
        
        stage("Test") {
            parallel {

                stage('Linting') {
                    steps {
                        sh 'composer install --no-interaction --no-progress --prefer-dist'
                        sh 'php vendor/bin/phpcs --standard=PSR2 app'
                        sh 'php vendor/bin/phpmd app text phpunit.xml'
                    }
                }

                stage("Unit test") {
                    steps {
                        sh 'php artisan test'
                    }
                }
            }
        }
        
        stage("Docker build and push") {
            steps {
                sh "docker rmi danielgara/laravel8cdpart2"
                sh "docker build -t danielgara/laravel8cdpart2 --no-cache ."
                sh "docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}"
                sh "docker push danielgara/laravel8cdpart2"
            }
        }
        
        stage("Deploy to staging") {
            steps {
                sh "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
                sh "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
                sh "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
                sh "ssh-agent sh -c 'ssh-add /etc/ansible/pem/key.pem && ansible-playbook /etc/ansible/playbook/playbook-staging-run.yml'"
            }
        }
        
        stage("Acceptance test") {
            parallel {
                stage("Curl") {
                    steps {
                        sleep 20
                        sh "chmod +x acceptance_test.sh && ./acceptance_test.sh"
                    }
                }
                
                stage("Codeception") {
                    steps {
                        sh "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
                        sh "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
                        sh "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
                        sh "ssh-agent sh -c 'ssh-add /etc/ansible/pem/key.pem && ansible-playbook /etc/ansible/playbook/playbook-staging-acceptance.yml'"
                    }
                    
                    post {
                        always {
                            sh "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
                            sh "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
                            sh "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
                            sh "ssh-agent
